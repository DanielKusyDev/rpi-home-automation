"""Init

Revision ID: 63a76765edfd
Revises: 
Create Date: 2021-04-11 14:04:59.759490+00:00

"""
import enum

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op

revision = "63a76765edfd"
down_revision = None
branch_labels = None
depends_on = None


class _SensorTypeEnum(enum.Enum):
    MOISTURE = "MOISTURE_SENSOR"
    TEMPERATURE = "TEMPERATURE_SENSOR"
    SUNLIGHT_LEVEL = "SUNLIGHT_LEVEL_SENSOR"


def seed_initial_sensor_types():
    sensor_type = sa.table(
        "Sensor",
        sa.column("Id", sa.Integer),
        sa.column("PlantId", sa.Integer),
        sa.column("SensorTypeId", sa.Integer),
        sa.column("GpioChannel", sa.Integer),
        sa.column("Name", sa.Unicode(255)),
        sa.column("AddDate", sa.DateTime),
    )

    op.bulk_insert(
        sensor_type,
        [
            {"Id": 1, "Name": _SensorTypeEnum.MOISTURE.value},
            {"Id": 2, "Name": _SensorTypeEnum.TEMPERATURE.value},
            {"Id": 3, "Name": _SensorTypeEnum.SUNLIGHT_LEVEL.value},
        ],
    )


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "Gpio",
        sa.Column("Channel", sa.Integer(), nullable=False),
        sa.Column("State", sa.Boolean(), nullable=True),
        sa.Column("Callback", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("Channel", name=op.f("PK__Gpio")),
    )
    op.create_table(
        "Plant",
        sa.Column("Id", sa.Integer(), nullable=False),
        sa.Column("Name", sa.Unicode(length=255), nullable=False),
        sa.Column("AddDate", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("Id", name=op.f("PK__Plant")),
        sa.UniqueConstraint("Name", name=op.f("UQ__Plant__Name")),
    )
    op.create_table(
        "SensorType",
        sa.Column("Id", sa.Integer(), nullable=False),
        sa.Column("Name", sqlalchemy_utils.types.choice.ChoiceType(choices=SensorTypeEnum, impl=sa.Unicode(255)), nullable=False),
        sa.Column("Description", sa.Unicode(length=255), nullable=True),
        sa.PrimaryKeyConstraint("Id", name=op.f("PK__SensorType")),
        sa.UniqueConstraint("Name", name=op.f("UQ__SensorType__Name")),
    )
    op.create_table(
        "Sensor",
        sa.Column("Id", sa.Integer(), nullable=False),
        sa.Column("PlantId", sa.Integer(), nullable=True),
        sa.Column("SensorTypeId", sa.Integer(), nullable=True),
        sa.Column("GpioChannel", sa.Integer(), nullable=True),
        sa.Column("Name", sa.Unicode(length=255), nullable=False),
        sa.Column("AddDate", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["GpioChannel"], ["Gpio.Channel"], name=op.f("FK__Sensor__GpioChannel__Gpio")),
        sa.ForeignKeyConstraint(["PlantId"], ["Plant.Id"], name=op.f("FK__Sensor__PlantId__Plant")),
        sa.ForeignKeyConstraint(["SensorTypeId"], ["SensorType.Id"], name=op.f("FK__Sensor__SensorTypeId__SensorType")),
        sa.PrimaryKeyConstraint("Id", name=op.f("PK__Sensor")),
        sa.UniqueConstraint("GpioChannel", name=op.f("UQ__Sensor__GpioChannel")),
        sa.UniqueConstraint("Name", name=op.f("UQ__Sensor__Name")),
    )

    seed_initial_sensor_types()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("Sensor")
    op.drop_table("SensorType")
    op.drop_table("Plant")
    op.drop_table("Gpio")
    # ### end Alembic commands ###
